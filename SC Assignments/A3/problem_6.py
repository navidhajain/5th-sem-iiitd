# -*- coding: utf-8 -*-
"""problem_6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rfJO-bqUkpzJondhTgaCAnDVVRp13oFh
"""

import numpy as np

# normalised power method
a = [[2, 3, 2], [10, 3, 4], [3, 6, 1]]
x = [[0], [0], [1]]
error = 1.1102230246251565e-16
yold = [[0], [0], [0]]
y = [[0], [0], [0]]
flag = True

while flag:
    y = np.matmul(a, x)
    ynorm = max(abs(y))
    x = y/ynorm
    # print(y)
    if max(abs(np.subtract(yold, y))) < error:
        flag = False
    for i in range(3):
        yold[i] = y[i]

print('Power Method:')
print('largest eigenvalue(magnitude) is ', ynorm[0])
print('eigenvector is ', x)
print()

# a=[[2, 3, 2], [10, 3, 4], [3, 6, 1]]
# x=[[0], [0], [1]]
# error=1.1102230246251565e-16
# yold=[[0], [0], [0]]
# ainv=np.linalg.inv(a)

a = [[2, 3, 2], [10, 3, 4], [3, 6, 1]]
x = [[0], [0], [1]]
error = 1.1102230246251565e-16
yold = [[0], [0], [0]]
y = [[0], [0], [0]]
ainv = np.linalg.inv(a)
flag = True
c = 0

while flag and c != 100:
    c += 1
    y = np.linalg.solve(a, x)
    ynorminv = max(abs(y))
    x = y/ynorminv
    # print(c)
    # print(np.subtract(yold, y))
    if max(abs(np.subtract(np.matmul(a, yold), np.matmul(a, y)))) < error:
        flag = False
    for i in range(3):
        yold[i] = y[i]

print('Inverse Power Method:')
print('smallest eigenvalue (magnitude) is', 1/ynorminv[0])
print('eigenvector is ', x)
print()

# #inverse method
# c=1
# while True:
#   if c==1:
#     yinv=np.linalg.solve(a, x0)
#     c=0
#   else:
#     yinv=np.linalg.solve(a, u)
#   ynorm=getmax(yinv)
#   for i in range(3):
#     u[i][0]=yinv[i][0]/ynorm
#   for i in range(3):
#     yoldinv[i][0]=yinv[i][0]
#   if abs(getmax(np.subtract(yoldinv, yinv)))<error:
#     break;

# print('smallest value of eigenvalue is ', ynorm)
# print('smalest eigenvector is ', u)
print('According to the library')
evalue, evect = np.linalg.eig(a)
print('eigenvalues are', evalue)
print('eigenvectors are', evect)
