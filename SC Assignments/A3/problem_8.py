# -*- coding: utf-8 -*-
"""problem_8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17arY0G7_dFfa6sKI2BTkK4BTsVmR6pGa
"""

import numpy as np
a = [[2, 3, 2], [10, 3, 4], [3, 6, 1]]
x = [[0], [1], [1]]
error = 1.1102230246251565e-16
yold = [[0], [0], [0]]
y = [[0], [0], [0]]
flag = True

evalue, evect = np.linalg.eig(a)
maxeig = max(evalue)


def ray(a, x):
    for i in range(10):
        subnum = np.matmul(np.transpose(x), a)
        num = np.matmul(subnum, x)[0][0]
        den = np.matmul(np.transpose(x), x)[0][0]
        quot = num/den
        lam_iden = [[quot, 0, 0], [0, quot, 0], [0, 0, quot]]
        anew = np.subtract(a, lam_iden)
        ainv = np.linalg.inv(anew)
        y = np.matmul(ainv, x)
        ynorm = max(abs(y))
        x = y/ynorm
        if i == 0:
            old_e = abs(quot-maxeig)
        if i > 0:
            new_e = abs(quot-maxeig)
            r = np.log(old_e)/np.log(new_e)
            print('convergence rate for ', i, 'th iteration is ', r)
            old_e = new_e

    return quot, x


print()
lam, vec = ray(a, x)
print('rayleigh quotient iteration: ')
print('eigenvalue: ', lam)
print('eigenvector: ', vec)


# r=np.log(e4)/np.log(e3)
# print(r)
