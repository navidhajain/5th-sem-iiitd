# -*- coding: utf-8 -*-
"""problem_7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SJYWRIl-tQSN_tbnqZ6_QI3fOZYL4RCr
"""

import numpy as np
import matplotlib.pyplot as plt

x_noisy = np.loadtxt("hw2_data_denoising.txt")
d=[ [0]*1000 for i in range(999) ]

for i in range(999):
  d[i][i]=-1
  d[i][i+1]=1

dt = [[d[j][i] for j in range(len(d))] for i in range(len(d[0]))]

dtd=np.matmul(dt, d)
iden =[ [0]*1000 for i in range(1000) ]
for i in range(1000):
  iden[i][i]=1

lam=[1, 100, 10000]

def getx(lam1):
  a=[ [0]*1000 for i in range(1000) ]
  for i in range(len(dtd)):
   for j in range(len(dtd[0])):
     a[i][j] = iden[i][j] + dtd[i][j]*lam1
  
  x= np.linalg.lstsq(a, x_noisy, rcond=None)[0]

  return x

x_re=[getx(lam[0]), getx(lam[1]), getx(lam[2])]

# for i in range(len(x_re)-1):
#   if all(x_re[i]==x_re[i+1]):
#     print('de')

plt.figure()
plt.plot(np.arange(1, 1 + len(x_re[0])), x_re[0],
color=(0.5, 0.5, 0.5), label="Reconstructed Signal")

plt.xlabel("$n$", fontsize=14)
plt.ylabel("$x_{reconstructed}$", fontsize=14)
plt.legend(loc="best")
plt.gcf().tight_layout()
plt.show()

plt.figure()
plt.plot(np.arange(1, 1 + len(x_re[1])), x_re[1],
color=(0.5, 0.5, 0.5), label="Reconstructed Signal")

plt.xlabel("$n$", fontsize=14)
plt.ylabel("$x_{reconstructed}$", fontsize=14)
plt.legend(loc="best")
plt.gcf().tight_layout()
plt.show()

plt.figure()
plt.plot(np.arange(1, 1 + len(x_re[2])), x_re[2],
color=(0.5, 0.5, 0.5), label="Reconstructed Signal")

plt.xlabel("$n$", fontsize=14)
plt.ylabel("$x_{reconstructed}$", fontsize=14)
plt.legend(loc="best")
plt.gcf().tight_layout()
plt.show()