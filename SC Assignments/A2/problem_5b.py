# -*- coding: utf-8 -*-
"""problem_5b.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MEVUhokkXd3SLX7qQPvUK6Mk9Xn4Tr2Q
"""

#5b
import numpy as np
import matplotlib.pyplot as plt
import math
from timeit import default_timer as timer

t, y = np.loadtxt("hw2_data_ty.txt").T
a=[[0]*2 for i in range(50)]
b=[0 for i in range(50)]
# print(a)
for i in range(50):
  a[i][0]=1
  a[i][1]=t[i]

for i in range(50):
  b[i]= math.log(y[i]/(1-y[i]))

def getresidual(btrue, bcomp):
    res_mat = np.subtract(btrue, bcomp)
    residual = np.linalg.norm(res_mat)

    return residual

def gety(beta, alpha):
  y=[0 for i in range(50)]
  global t
  for i in range(50):
    num=math.exp((alpha*t[i])+beta)
    den=1+num
    y[i]=num/den

  return y

#i part

at=[[a[j][i] for j in range(len(a))] for i in range(len(a[0]))]
ata=np.matmul(at, a)
atb=np.matmul(at, b)
xsolve=np.linalg.solve(ata, atb) 
bcompsolve=np.matmul(a, xsolve)
ysolve=gety(xsolve[0], xsolve[1])
# print(xsolve)

# time= 10.62985460400023 for 100000 loops

#ii part

xlst= np.linalg.lstsq(a, b, rcond=None)[0]
bcomplst=np.matmul(a, xlst)
ylst=gety(xlst[0], xlst[1])
# print(xlst)
# print(bcomplst)

# time= 13.495780264000132 for 100000 loops

plt.figure()
plt.plot(t, ysolve, color='red', ms=2.5)
plt.plot(t, ylst, 'go', ms=2.5)
plt.plot(t, y, 'bo', ms=2.5)
plt.grid(True)
plt.xlabel("$t_i$", fontsize=14)
plt.ylabel("$f(t_i)$", fontsize=14)
plt.gcf().tight_layout()
plt.show()

print("Residual for the first part(using solve) is", getresidual(b, bcompsolve))
print("Residual for the second part(using lstsq) is",getresidual(b, bcomplst))